"""empty message

Revision ID: 1deb625f8c2e
Revises: f4c17616f611
Create Date: 2019-09-07 00:23:56.783367

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "1deb625f8c2e"
down_revision = "f4c17616f611"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "flavors",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("name", sa.String(length=60), nullable=True),
        sa.Column("icon", sa.String(length=60), nullable=True),
        sa.Column("color", sa.String(length=6), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_flavors_icon"), "flavors", ["icon"], unique=True)
    op.create_index(op.f("ix_flavors_id"), "flavors", ["id"], unique=False)
    op.create_index(op.f("ix_flavors_name"), "flavors", ["name"], unique=True)
    op.create_table(
        "kinds",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=True),
        sa.Column("short_description_nl", sa.String(), nullable=True),
        sa.Column("description_nl", sa.String(), nullable=True),
        sa.Column("short_description_en", sa.String(), nullable=True),
        sa.Column("description_en", sa.String(), nullable=True),
        sa.Column("c", sa.Boolean(), nullable=True),
        sa.Column("h", sa.Boolean(), nullable=True),
        sa.Column("i", sa.Boolean(), nullable=True),
        sa.Column("s", sa.Boolean(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_kinds_id"), "kinds", ["id"], unique=False)
    op.create_index(op.f("ix_kinds_name"), "kinds", ["name"], unique=True)
    op.create_table(
        "flavors_to_tags",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("kind_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("flavor_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(["flavor_id"], ["flavors.id"]),
        sa.ForeignKeyConstraint(["kind_id"], ["kinds.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_flavors_to_tags_flavor_id"), "flavors_to_tags", ["flavor_id"], unique=False)
    op.create_index(op.f("ix_flavors_to_tags_id"), "flavors_to_tags", ["id"], unique=False)
    op.create_index(op.f("ix_flavors_to_tags_kind_id"), "flavors_to_tags", ["kind_id"], unique=False)
    op.create_table(
        "kinds_to_tags",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("amount", sa.Integer(), nullable=True),
        sa.Column("kind_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("tag_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(["kind_id"], ["kinds.id"]),
        sa.ForeignKeyConstraint(["tag_id"], ["tags.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_kinds_to_tags_id"), "kinds_to_tags", ["id"], unique=False)
    op.create_index(op.f("ix_kinds_to_tags_kind_id"), "kinds_to_tags", ["kind_id"], unique=False)
    op.create_index(op.f("ix_kinds_to_tags_tag_id"), "kinds_to_tags", ["tag_id"], unique=False)
    op.add_column("prices", sa.Column("five", sa.Float(), nullable=True))
    op.add_column("prices", sa.Column("half", sa.Float(), nullable=True))
    op.add_column("prices", sa.Column("internal_product_id", sa.String(length=255), nullable=True))
    op.add_column("prices", sa.Column("joint", sa.Float(), nullable=True))
    op.add_column("prices", sa.Column("one", sa.Float(), nullable=True))
    op.add_column("prices", sa.Column("two_five", sa.Float(), nullable=True))
    op.drop_index("ix_prices_product_id", table_name="prices")
    op.drop_constraint("prices_product_id_fkey", "prices", type_="foreignkey")
    op.drop_column("prices", "unit")
    op.drop_column("prices", "quantity")
    op.drop_column("prices", "product_id")
    op.drop_column("prices", "price")
    op.drop_index("ix_shops_description", table_name="shops")
    op.drop_index("ix_products_to_categories_category_id", table_name="products_to_categories")
    op.drop_index("ix_products_to_categories_id", table_name="products_to_categories")
    op.drop_index("ix_products_to_categories_product_id", table_name="products_to_categories")
    op.drop_table("products_to_categories")
    op.drop_index("ix_products_to_tags_id", table_name="products_to_tags")
    op.drop_index("ix_products_to_tags_product_id", table_name="products_to_tags")
    op.drop_index("ix_products_to_tags_tag_id", table_name="products_to_tags")
    op.drop_table("products_to_tags")
    op.drop_index("ix_products_id", table_name="products")
    op.drop_index("ix_products_name", table_name="products")
    op.drop_table("products")
    op.drop_index("ix_categories_description", table_name="categories")
    op.drop_index("ix_categories_id", table_name="categories")
    op.drop_index("ix_categories_name", table_name="categories")
    op.drop_index("ix_categories_shop_id", table_name="categories")
    op.drop_table("categories")
    op.create_unique_constraint(None, "shops", ["description"])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "shops", type_="unique")
    op.create_index("ix_shops_description", "shops", ["description"], unique=True)
    op.add_column(
        "prices", sa.Column("price", postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True)
    )
    op.add_column("prices", sa.Column("product_id", postgresql.UUID(), autoincrement=False, nullable=True))
    op.add_column("prices", sa.Column("quantity", sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column("prices", sa.Column("unit", sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.create_foreign_key("prices_product_id_fkey", "prices", "products", ["product_id"], ["id"])
    op.create_index("ix_prices_product_id", "prices", ["product_id"], unique=False)
    op.drop_column("prices", "two_five")
    op.drop_column("prices", "one")
    op.drop_column("prices", "joint")
    op.drop_column("prices", "internal_product_id")
    op.drop_column("prices", "half")
    op.drop_column("prices", "five")
    op.create_table(
        "categories",
        sa.Column("id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column("shop_id", postgresql.UUID(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["shop_id"], ["shops.id"], name="categories_shop_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="categories_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_categories_shop_id", "categories", ["shop_id"], unique=False)
    op.create_index("ix_categories_name", "categories", ["name"], unique=True)
    op.create_index("ix_categories_id", "categories", ["id"], unique=False)
    op.create_index("ix_categories_description", "categories", ["description"], unique=True)
    op.create_table(
        "products",
        sa.Column("id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("internal_product_id", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="products_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_products_name", "products", ["name"], unique=True)
    op.create_index("ix_products_id", "products", ["id"], unique=False)
    op.create_table(
        "products_to_tags",
        sa.Column("id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("amount", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("product_id", postgresql.UUID(), autoincrement=False, nullable=True),
        sa.Column("tag_id", postgresql.UUID(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["product_id"], ["products.id"], name="products_to_tags_product_id_fkey"),
        sa.ForeignKeyConstraint(["tag_id"], ["tags.id"], name="products_to_tags_tag_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="products_to_tags_pkey"),
    )
    op.create_index("ix_products_to_tags_tag_id", "products_to_tags", ["tag_id"], unique=False)
    op.create_index("ix_products_to_tags_product_id", "products_to_tags", ["product_id"], unique=False)
    op.create_index("ix_products_to_tags_id", "products_to_tags", ["id"], unique=False)
    op.create_table(
        "products_to_categories",
        sa.Column("id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("product_id", postgresql.UUID(), autoincrement=False, nullable=True),
        sa.Column("category_id", postgresql.UUID(), autoincrement=False, nullable=True),
        sa.Column("visible", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["category_id"], ["categories.id"], name="products_to_categories_category_id_fkey"),
        sa.ForeignKeyConstraint(["product_id"], ["products.id"], name="products_to_categories_product_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="products_to_categories_pkey"),
    )
    op.create_index("ix_products_to_categories_product_id", "products_to_categories", ["product_id"], unique=False)
    op.create_index("ix_products_to_categories_id", "products_to_categories", ["id"], unique=False)
    op.create_index("ix_products_to_categories_category_id", "products_to_categories", ["category_id"], unique=False)
    op.drop_index(op.f("ix_kinds_to_tags_tag_id"), table_name="kinds_to_tags")
    op.drop_index(op.f("ix_kinds_to_tags_kind_id"), table_name="kinds_to_tags")
    op.drop_index(op.f("ix_kinds_to_tags_id"), table_name="kinds_to_tags")
    op.drop_table("kinds_to_tags")
    op.drop_index(op.f("ix_flavors_to_tags_kind_id"), table_name="flavors_to_tags")
    op.drop_index(op.f("ix_flavors_to_tags_id"), table_name="flavors_to_tags")
    op.drop_index(op.f("ix_flavors_to_tags_flavor_id"), table_name="flavors_to_tags")
    op.drop_table("flavors_to_tags")
    op.drop_index(op.f("ix_kinds_name"), table_name="kinds")
    op.drop_index(op.f("ix_kinds_id"), table_name="kinds")
    op.drop_table("kinds")
    op.drop_index(op.f("ix_flavors_name"), table_name="flavors")
    op.drop_index(op.f("ix_flavors_id"), table_name="flavors")
    op.drop_index(op.f("ix_flavors_icon"), table_name="flavors")
    op.drop_table("flavors")
    # ### end Alembic commands ###
